DROP TABLE IF EXISTS inventorydb.inventory_logs;
DROP TABLE IF EXISTS inventorydb.inventory;

DROP TABLE IF EXISTS orderdb.order_status_history;
DROP TABLE IF EXISTS orderdb.order_items;
DROP TABLE IF EXISTS orderdb.orders;

DROP TABLE IF EXISTS productdb.product_attributes;
DROP TABLE IF EXISTS productdb.products;
DROP TABLE IF EXISTS productdb.product_categories;

create table inventorydb.inventory
(
    product_id         bigint      not null
        primary key,
    available_quantity int         not null,
    created_at         datetime(6) not null,
    last_updated_at    datetime(6) not null,
    reserved_quantity  int         not null,
    version            bigint      null
);

create table inventorydb.inventory_logs
(
    log_id          bigint auto_increment
        primary key,
    change_type     varchar(255) not null,
    new_quantity    int          not null,
    order_id        bigint       null,
    product_id      bigint       not null,
    quantity_change int          not null,
    timestamp       datetime(6)  not null
);

create table orderdb.orders
(
    id           bigint auto_increment
        primary key,
    created_at   datetime(6)    not null,
    payment_id   varchar(255)   null,
    status       varchar(255)   not null,
    total_amount decimal(38, 2) not null,
    updated_at   datetime(6)    not null,
    user_id      bigint         not null
);

create table orderdb.order_status_history
(
    id         bigint auto_increment
        primary key,
    changed_at datetime(6)  not null,
    new_status varchar(255) not null,
    old_status varchar(255) null,
    order_id   bigint       not null,
    constraint FKnmcbg3mmbt8wfva97ra40nmp3
        foreign key (order_id) references orders (id)
);

create table orderdb.order_items
(
    id         bigint auto_increment
        primary key,
    price      decimal(38, 2) not null,
    product_id bigint         not null,
    quantity   int            not null,
    order_id   bigint         not null,
    constraint FKbioxgbv59vetrxe0ejfubep1w
        foreign key (order_id) references orders (id)
);


create table productdb.product_categories
(
    id   bigint auto_increment
        primary key,
    name varchar(255) not null,
    constraint UK_fl075bwasjwsxybk4x174befx
        unique (name)
);

create table productdb.products
(
    id             bigint auto_increment
        primary key,
    created_at     datetime(6)    null,
    description    varchar(255)   null,
    display_status varchar(255)   null,
    image_urls     text           null,
    name           varchar(255)   null,
    price          decimal(38, 2) null,
    updated_at     datetime(6)    null,
    category_id    bigint         null,
    constraint FK6t5dtw6tyo83ywljwohuc6g7k
        foreign key (category_id) references product_categories (id)
);

create table productdb.product_attributes
(
    id              bigint auto_increment
        primary key,
    attribute_name  varchar(255) not null,
    attribute_value varchar(255) not null,
    product_id      bigint       not null,
    constraint FKcex46yvx4g18b2pn09p79h1mc
        foreign key (product_id) references products (id)
);






-- Insert sample data for inventory
INSERT INTO inventorydb.inventory (product_id, available_quantity, reserved_quantity, version, created_at, last_updated_at) VALUES
(1, 100, 0, 0, NOW(), NOW()), -- Laptop Pro X
(2, 50, 0, 0, NOW(), NOW()),  -- The Great Novel
(3, 200, 0, 0, NOW(), NOW()), -- Summer T-Shirt
(4, 75, 0, 0, NOW(), NOW()),  -- Smartphone Ultra
(5, 120, 0, 0, NOW(), NOW()); -- Cookbook Basics

-- Insert sample data for inventory_logs (optional, can be generated by service operations)
-- INSERT INTO inventory_logs (product_id, change_type, quantity_change, new_quantity, order_id, timestamp) VALUES
-- (1, 'INITIAL_STOCK', 100, 100, NULL, CURRENT_TIMESTAMP());


-- Insert sample data for orders
INSERT INTO orderdb.orders (user_id, total_amount, status, created_at, updated_at, payment_id) VALUES
(1, 1200.00, 'PENDING_PAYMENT', NOW(), NOW(), NULL),
(1, 25.50, 'PAID', NOW(), NOW(), 'PAY123'),
(2, 15.00, 'PENDING_PAYMENT', NOW(), NOW(), NULL),
(3, 800.00, 'PAID', NOW(), NOW(), 'PAY456');

-- Insert sample data for order_items
INSERT INTO orderdb.order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1200.00), -- Order 1: Laptop Pro X
(2, 2, 1, 25.50),  -- Order 2: The Great Novel
(3, 3, 1, 15.00),  -- Order 3: Summer T-Shirt
(4, 4, 1, 800.00); -- Order 4: Smartphone Ultra

-- Insert sample data for order_status_history
INSERT INTO orderdb.order_status_history (order_id, old_status, new_status, changed_at) VALUES
(1, NULL, 'PENDING_PAYMENT', NOW()),
(2, NULL, 'PENDING_PAYMENT', NOW()),
(2, 'PENDING_PAYMENT', 'PAID', NOW()),
(3, NULL, 'PENDING_PAYMENT', NOW()),
(4, NULL, 'PENDING_PAYMENT', NOW()),
(4, 'PENDING_PAYMENT', 'PAID', NOW());


-- Insert sample data for product_categories
INSERT INTO productdb.product_categories (id, name) VALUES
(1, 'Electronics'),
(2, 'Books'),
(3, 'Clothing');

-- Insert sample data for products
INSERT INTO productdb.products (name, description, price, display_status, category_id, image_urls, created_at, updated_at) VALUES
('Laptop Pro X', 'Powerful laptop for professionals', 1200.00, 'Còn hàng', 1, 'http://example.com/images/laptop_pro_x_1.jpg,http://example.com/images/laptop_pro_x_2.jpg', NOW(), NOW()),
('The Great Novel', 'A captivating story', 25.50, 'Còn hàng', 2, 'http://example.com/images/the_great_novel.jpg', NOW(), NOW()),
('Summer T-Shirt', 'Lightweight and comfortable t-shirt', 15.00, 'Còn hàng', 3, 'http://example.com/images/summer_tshirt.jpg', NOW(), NOW()),
('Smartphone Ultra', 'Latest generation smartphone with advanced features', 800.00, 'Còn hàng', 1, 'http://example.com/images/smartphone_ultra.jpg', NOW(), NOW()),
('Cookbook Basics', 'Essential recipes for beginners', 30.00, 'Còn hàng', 2, 'http://example.com/images/cookbook_basics.jpg', NOW(), NOW());

-- Insert sample data for product_attributes
INSERT INTO productdb.product_attributes (product_id, attribute_name, attribute_value) VALUES
(1, 'Processor', 'Intel i7'),
(1, 'RAM', '16GB'),
(1, 'Storage', '512GB SSD'),
(2, 'Author', 'Jane Doe'),
(2, 'Genre', 'Fiction'),
(3, 'Size', 'M'),
(3, 'Color', 'Blue'),
(4, 'Screen Size', '6.7 inch'),
(4, 'Camera', '48MP');
